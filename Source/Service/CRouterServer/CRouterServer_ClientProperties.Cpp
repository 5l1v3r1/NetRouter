///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//  Copyright © NetworkDLS 2002, All rights reserved
//
// THIS CODE AND INFORMATION IS PROVIDED "AS IS" WITHOUT WARRANTY OF 
// ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING BUT NOT LIMITED TO 
// THE IMPLIED WARRANTIES OF MERCHANTABILITY AND/OR FITNESS FOR A 
// PARTICULAR PURPOSE.
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef _CRouterServer_ClientProperties_Cpp
#define _CRouterServer_ClientProperties_Cpp
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#define _WIN32_WINNT 0x0500
#define WIN32_LEAN_AND_MEAN

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <WinSock2.H>
#include <WinSock.H>
#include <Windows.H>
#include <Stdio.H>
#include <Stdlib.H>
#include <Time.H>

#include "CRouterServer.H"

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
	The client event handle is used for all internal thread wait processes.
*/
HANDLE CRouterClient::EventHandle(void)
{
	return this->hThreadEvent;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
	Returns True if the client was connected, false if the client was accepted.
*/
bool CRouterClient::WasConnect(void)
{
	return this->bWasConnect;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
	This function is used to get a clients peer Port.
*/
int CRouterClient::PeerPort(void)
{
	return this->iPeerPort;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
	This function is used to get a clients peer IP address.
*/
char *CRouterClient::PeerAddress(void)
{
	return this->sPeerAddress;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
	This function is used to get a clients peer IP address.
*/
int CRouterClient::PeerAddress(char *sOutAddress, int iMaxSz)
{
	if(strcpy_s(sOutAddress, iMaxSz, this->sPeerAddress) == 0)
	{
		return (int) strlen(sOutAddress);
	}
	else {
		return 0;
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
	This function is used to get a clients slot number.
*/
int CRouterClient::Slot(void)
{
	return this->iSlot;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
	This function is used to get a clients peer ID.

	The PeerID is used to identify a connection but should not be confused with the ClientID.

	Every time a connection is made, PeerID is incremented but is never decremented.
*/
int CRouterClient::PeerID(void)
{
	return this->iPeerID;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
	Sets the specified clients socket to be disconnected. Returns TRUE on success. 
*/
bool CRouterClient::Disconnect(void)
{
	if(this->IsConnected())
	{
		this->bDisconnect = true;
		return true;
	}
	else{
		return false;
	}
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
	Returns TRUE if the specified client is set to be disconnected. This is a good way
		to determine if a client has been disconnected but is still being reported as
		connected because the slot is reserved.
*/
bool CRouterClient::IsDisconnectSet(void)
{
	return this->bDisconnect;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
/*
	Returns TRUE if the specified client is connected and not pending disconnection. 
*/
bool CRouterClient::IsConnected(void)
{
	return (this->bConnected && !this->bDisconnect);
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
#endif
